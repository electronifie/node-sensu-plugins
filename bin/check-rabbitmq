#!/usr/bin/env node

var program = require('commander');
var AMQPStats = require('amqp-stats');
var fs = require('fs');
var url = require('url');
var util = require('util');

program
  .version('0.0.1')
  .option('-U, --url <url>', 'RabbitMQ Manager URL')
  .option('-f, --config <config>', 'Configuration file')
  .option('-d, --debug', 'Debug mode - write extra info to stderr')
  .parse(process.argv);

var debugEnabled = (!!program.debug) ? true : false;
function logDebug(s) { if (debugEnabled) console.error(s); }

// Handle arguments
if (!program.url) { program.help();  process.exit(1); }

var parsed = url.parse(program.url);

logDebug(parsed);


//  RabitMQ Manager connection options
var options = {
  username: parsed.auth ? parsed.auth.split(':')[0] : 'guest',
  password: parsed.auth ? parsed.auth.split(':')[1] : 'guest',
  hostname: parsed.hostname + ':' + (parsed.port ? parsed.port : 15672),  // default: localhost:15672
  protocol: "http"  // default: http
};
logDebug(options);


// Parse our rule config file.  Should be of the form {[ "pattern", warn, error], ...}
var configFile = program.config;
var config = {};
if (!configFile) { 
  program.help();
  process.exit(1); 
} else {
  config = JSON.parse(fs.readFileSync(configFile, 'utf8'));
}

var timestamp = new Date().getTime();

// Writes scheme.prop.resul.timestamp to stdout
function log(p, v) {
  console.log(p+'\t'+v+'\t'+timestamp);
}

// Utility to evaluate dot-notation path of object properties/subproperties
function evalPath(obj, path) {
  return path.split('.').reduce(function(o, i) { return o[i];}, obj);
}

// Value we exist with.  0 = OK, 1 = WARN, 2 = CRIT, 3 = UNKNOWN
var returnCode = 0; 

// Array containing critical/warning hits.
var returnMEssages = [];

//  See if the given queue matches any of our rules.  Return after first match.  Ignore values < 0.
function matchQueue(queue) {
  for (var i = 0; i < config.rules.length; i++) {
    var rule = config.rules[i];
    if (queue.name.match(rule[0])) {
      logDebug(queue.name+" matched pattern in rule: ");
      logDebug(rule);
      logDebug("messages: "+queue.messages);
      if (rule[2] >= 0 && queue.messages >= rule[2]) {
        returnCode = Math.max(returnCode, 2);
        console.log(util.format("CRITICAL %s messages %d >= %d", queue.name, queue.messages, rule[2]));
        returnCode = 2;
      } else if (rule[1] >= 0 && queue.messages >= rule[1]) {
        returnCode = Math.max(returnCode, 1);
        console.log(util.format("WARNING %s messages %d >= %d", queue.name, queue.messages, rule[1]));
      }
    }
  }
}

var stats = new AMQPStats(options);

stats.overview(function (err, res, data) {
  if (err) {
    throw err;
  }

  stats.queues(function (err, res, data) {
    if (err) {
      throw err;
    }
    var queues = data;

    logDebug(queues);
    queues.forEach(function (queue) {
      matchQueue(queue);
    });
    process.exit(returnCode);
  });
});



