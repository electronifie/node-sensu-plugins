#!/usr/bin/env node

"use strict";
var program = require("commander");
var fs = require("fs");
var util = require("util");
var crypto = require('crypto');
var exec = require("child_process").exec;

var now = new Date().getTime() / 1000; // unix time in seconds

program
  .version("0.0.1")
  .option("-f, --config <config>", "Configuration file")
  .option("-d, --debug", "Debug mode - write extra info to stderr")
  .parse(process.argv);

var debugEnabled = (program.debug) ? true : false;
function logDebug(s) { if (debugEnabled) { console.error(s); } }

// Parse our rule config file.
var configFile = program.config;
var config = {};

if (!configFile) {
  program.help();
  process.exit(1); 
} else {
  config = JSON.parse(fs.readFileSync(configFile, 'utf8'));
}

// TODO:  Add time ranges in config file, like:
//  "validTime": {
//      "startTime":"",
//      "endTime":"",
//      "weekdaysOnly": true
//  }


logDebug(util.format("Got config: %s", JSON.stringify(config)));

// Takes file path and callback(err, data, mtime)
function checkFile(file, cb) {
  var mtime = 0;

  try {
    fs.stat(file, function(errStat, stats) {
      if(errStat) {
        if (errStat.code === "ENOENT") {
          cb(null, {mtime: 0, data: null});
        } else {
          cb(errStat);
        }
      } else {
        mtime = stats.mtime / 1000; // unix time in seconds
        
        fs.readFile(file, "utf8", function(errRead, data) {
           if (errRead) { cb(errRead); }
           cb(null, {mtime: mtime, data: data});
        });
      }
    });
  } catch(e) {
    cb(e);
  }
}

function processRule(rule) {
  var hash = crypto.createHash('sha1');
  var fileName = rule.outputFilePrefix + ".sha1";
  
  logDebug(util.format("Processing rule: %s", JSON.stringify(rule)));

  exec(rule.cmd, function (errExec, stdout, stderr) {
    var delta = 0;
    var hashData = "";

    logDebug("in exec, stdout: " + stdout);
    if(errExec) {
      console.log(util.format("CRITICAL '%s' failed with error '%s'.", rule.name, errExec));
      process.exit(2);
    }
  
    hash.update(stdout);
    hashData = hash.digest("hex");

    if (stderr.length > 0) {
      console.log(util.format("CRITICAL '%s' wrote data to stderr: '%s'.", rule.name, stderr));
      process.exit(2);
    } else {
      checkFile(fileName, function(errCheck, res) {
        if (errCheck) {
          console.log(util.format("CRITICAL '%s' command returned error '%s'.", rule.name, JSON.stringify(errCheck)));
          process.exit(2);
        } else if (!res || res.mtime === 0) {
          // Get nothing from existing file.  Write data to the file.
          fs.writeFile(fileName, hashData, "utf8", function(errWrite) {
            if(errWrite) {
              console.log(util.format("CRITICAL '%s' error while saving hash: '%s'.", rule.name, errWrite));
              process.exit(2);
            }

            // Everything's good.
            process.exit(0);
          });
        } else {
          if (hashData !== res.data) {
            logDebug("'" + hashData + "' does not match '" + res.data + "'");
            fs.writeFile(fileName, hashData, "utf8", function(errWrite) {
              if(errWrite) {
                console.log(util.format("CRITICAL '%s' error while saving hash: '%s'.", rule.name, errWrite));
                process.exit(2);
              }

              // Everything's good.
              process.exit(0);
            });
          } else {
            delta = now - res.mtime;
            if (delta > rule.criticalTime) {
              console.log(util.format("CRITICAL '%s' has not changed in %d seconds", rule.name, delta.toFixed(0)));
              process.exit(2);
            } else if (delta > rule.warnTime) {
              console.log(util.format("WARNING '%s' has not changed in %d seconds", rule.name, delta.toFixed(0)));
              process.exit(1);
            }
          }
        }
      }); // checkFile()
    }
  }); // exec
}

processRule(config);

