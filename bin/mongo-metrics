#!/usr/bin/env node

var program = require('commander');
var os = require('os');

program
  .version('0.0.1')
  .option('-u, --username <username>', 'Username')
  .option('-p, --password <password>', 'Password')
  .option('-H, --hostname <hostname>', 'Server hostname')
  .option('-P, --port <port>', 'Server port')
  .option('-S, --scheme <scheme>', 'Scheme')
  .option('-d, --debug', 'Debug mode - write extra info to stderr')
  .parse(process.argv);

// Handle arguments
var hostname = program.hostname ? program.hostname : "localhost",
  port = program.port ? program.port : 27017,
  creds = !program.username ? "" : program.username + (program.password ? '/'+program.password+'@' : '@'),
  scheme = program.scheme ? program.scheme : os.hostname().split('.')[0],
  debugEnabled = program.debug ? true : false;

// Connection URL
var url = 'mongodb://'+creds+hostname+':'+port;

var MongoClient = require('mongodb').MongoClient
  , assert = require('assert');

var timestamp = new Date().getTime();

// Writes scheme.prop.resul.timestamp to stdout
function log(p, v) {
  console.log(scheme+'.mongodb.'+p+' '+v+' '+timestamp+"\n");
}

function logDebug(s) { if (debugEnabled) console.error(s); }

// Utility to evaluate dot-notation path of object properties/subproperties
function evalPath(obj, path) {
  return path.split('.').reduce(function(o, i) { return o[i];}, obj);
}

// Recurse through an object and return an array of { name, val } objects where name is the dot path
// and val is the number value or 1|0 for true|false.  Ignore string and array values.
function recprop(prefix, obj, results) {
  // Can't produce metrics from string, and we really shouldn't have arrays in here
  if (typeof obj === "string" || obj instanceof Array) { return results; }

  // convert booleans to 1 or 0 for metrics
  else if (typeof obj === "boolean") { return results.push({ name: prefix, val: obj ? 1 : 0 }); }

  // got a number, just return that
  else if (typeof obj === "number") { return results.push({ name: prefix, val: obj }); }

  // must have an object...recurse through proerties
  else {
    Object.keys(obj).forEach(function(k) {
      if (k !== "wiredTiger") {
        var res = recprop((prefix ? prefix + "." + k : k), obj[k], results);
        results.concat(res);
      }
    });
  }
  return results;
}

function processStatus(db) {
  db.admin().serverStatus(function(err, result) {
    if (err) {
      console.error("db.admin().getServerStatus() failed:");
      console.error(err);
      if(db) db.close(true);
      process.exit(1);
    }

    recprop(null, result, []).forEach(function(obj) {
      log(obj.name, obj.val);
    });

    logDebug("Closing connection to "+url);
    db.close();
  });
}

// Connect and run everything
logDebug("Attempting to connect to "+url);
MongoClient.connect(url, function(err, db) {
  if (err) {
    console.error("Connect failed:");
    console.error(err);
    if(db) db.close(true);
    process.exit(1);
  }

  logDebug("Connected correctly to "+url);
  if (program.username) {
    db.authenticate(program.username, program.password, function(err, authres) {
      if (err || !authres) {
        console.error("Authentication failed:");
        console.error(err);
        if (db) db.close(true);
        process.exit(1);
      }
      processStatus(db);
    });
  } else {
    processStatus(db);
  }
});


